/* Autogenerated file, DO NOT EDIT */
#pragma once

#include "keras/model.h"

namespace test {

inline auto lstm_simple_7x20() {
    printf("TEST lstm_simple_7x20\n");

#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
    keras::Tensor in{7, 20};
    in.data_ = {0.1570649, 0.60163397, 0.17786945, 0.95832103, 0.7300073, 0.6645223, 0.7393395, 0.6063808, 0.54294944, 0.81772506, 0.57116216, 0.64379567, 0.2205167, 0.93797356, 0.04588994, 0.1840909, 0.9838887, 0.08225295, 0.2372483, 0.2940854, 0.73144364, 0.94898427, 0.83515257, 0.7149243, 0.32488996, 0.5229741, 0.73850113, 0.92625743, 0.31100437, 0.51435405, 0.2465324, 0.25962877, 0.9634913, 0.9961743, 0.0152575895, 0.9993107, 0.6983042, 0.44951907, 0.092777126, 0.47265726, 0.10561825, 0.07023054, 0.3802275, 0.011209929, 0.5331854, 0.84377784, 0.23355405, 0.47626626, 0.73493534, 0.8432765, 0.47865978, 0.39906922, 0.16394043, 0.6352578, 0.08379252, 0.8411484, 0.15857023, 0.74958277, 0.64891446, 0.35830295, 0.25296256, 0.30123702, 0.8815413, 0.062939346, 0.38457823, 0.5689383, 0.38159636, 0.58470076, 0.12774591, 0.99811965, 0.7007867, 0.26146767, 0.24251394, 0.31931514, 0.54171056, 0.12905014, 0.9897808, 0.87258726, 0.2846867, 0.0613126, 0.28302032, 0.4925149, 0.520907, 0.5437566, 0.028069831, 0.13745242, 0.64777094, 0.4988714, 0.9993212, 0.5966853, 0.77763104, 0.7616627, 0.21967788, 0.44265163, 0.14014666, 0.99524814, 0.52253455, 0.13781881, 0.72399575, 0.9396027, 0.41807777, 0.8854348, 0.14401768, 0.7710125, 0.301729, 0.6756509, 0.7399269, 0.4701715, 0.6570209, 0.8982072, 0.8481868, 0.8979457, 0.57247645, 0.84458166, 0.21959619, 0.72753215, 0.5361714, 0.4062876, 0.079250194, 0.3053372, 0.6718522, 0.20210406, 0.7055029, 0.34576783, 0.1723587, 0.6515911, 0.3275978, 0.8138636, 0.6445433, 0.7016285, 0.57602006, 0.009526236, 0.43583024, 0.21773516, 0.36157382, 0.6769584, 0.56553984, 0.085520774, 0.59668267, 0.30508688};

    keras::Tensor target{3};
    target.data_ = {0.16553512, -0.6299155, 0.15120941};
#pragma GCC diagnostic pop

    auto [model, load_time] = keras::timeit(keras::Model::load, "C:\Users\user\Desktop\keras-py2cpp\models\lstm_simple_7x20.model");
    auto [output, apply_time] = keras::timeit(model, in);

    for (size_t i = 0; i < target.dims_[0]; ++i)
        kassert_eq(target(i), output(i), 1e-6);

    return std::make_tuple(load_time, apply_time);
}

} // namespace test

