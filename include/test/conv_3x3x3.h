/* Autogenerated file, DO NOT EDIT */
#pragma once

#include "keras/model.h"

namespace test {

inline auto conv_3x3x3() {
    printf("TEST conv_3x3x3\n");

#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
    keras::Tensor in{10, 10, 3};
    in.data_ = {0.24721676, 0.8650245, 0.52760446, 0.024554035, 0.47844267, 0.7741033, 0.30125403, 0.9765471, 0.32556567, 0.19432944, 0.37812403, 0.0778461, 0.9522428, 0.6168157, 0.09079303, 0.029685004, 0.7669796, 0.55213124, 0.36021867, 0.32577032, 0.83316404, 0.8668413, 0.28732148, 0.6257186, 0.20541005, 0.122628376, 0.16089208, 0.05260947, 0.7410069, 0.80030453, 0.6143608, 0.4953185, 0.08560143, 0.46230757, 0.2909834, 0.122253045, 0.44402644, 0.39651272, 0.66028523, 0.40440705, 0.7959597, 0.9475036, 0.56013876, 0.809064, 0.48980772, 0.47940686, 0.5361733, 0.11349275, 0.19628005, 0.2330152, 0.589253, 0.94986004, 0.53496253, 0.43405747, 0.5438782, 0.45922878, 0.88369936, 0.4462477, 0.31519452, 0.48034325, 0.4271027, 0.5825996, 0.77381337, 0.40754655, 0.7841445, 0.041744824, 0.2432042, 0.6775534, 0.82607114, 0.25944802, 0.6416909, 0.15162252, 0.89917123, 0.7614332, 0.9526304, 0.9817697, 0.3374927, 0.9564345, 0.18687236, 0.5453334, 0.1349432, 0.031587, 0.6053018, 0.67548823, 0.26100892, 0.60659814, 0.036011886, 0.9628898, 0.26274496, 0.39511392, 0.0012630865, 0.3145073, 0.74624395, 0.9607876, 0.43905544, 0.6274693, 0.117399, 0.045866106, 0.7521052, 0.62959826, 0.46159637, 0.45696232, 0.37827176, 0.7574187, 0.56945306, 0.27333128, 0.14202517, 0.7766839, 0.45125732, 0.98712844, 0.94270205, 0.42027712, 0.58676344, 0.8287766, 0.70134395, 0.71295476, 0.6186129, 0.8477235, 0.9020697, 0.13122025, 0.8995889, 0.10053811, 0.5554966, 0.15009645, 0.14954334, 0.7865242, 0.7836179, 0.9464117, 0.55593294, 0.15877208, 0.035470966, 0.24118455, 0.03425848, 0.8990876, 0.94036794, 0.35685602, 0.4587246, 0.052324872, 0.9339159, 0.3438446, 0.36833164, 0.0017121871, 0.28752846, 0.5503707, 0.9995024, 0.5493626, 0.41470757, 0.2323864, 0.6043886, 0.06434005, 0.771321, 0.4941558, 0.94325984, 0.8346833, 0.8960482, 0.8030081, 0.6667171, 0.4688735, 0.26763177, 0.73816943, 0.77826715, 0.29891485, 0.71874434, 0.43923116, 0.3044388, 0.72166836, 0.6952554, 0.7405664, 0.025063338, 0.1749849, 0.94891936, 0.7893942, 0.49909753, 0.4443621, 0.9972617, 0.56197625, 0.58518195, 0.59929764, 0.33756518, 0.6629692, 0.40998083, 0.3269559, 0.6991267, 0.75738406, 0.46909288, 0.27843258, 0.7180963, 0.6465731, 0.718708, 0.3373641, 0.2710523, 0.97475046, 0.4815424, 0.46826985, 0.61881095, 0.8273751, 0.046206653, 0.7341723, 0.8916082, 0.66865194, 0.5686324, 0.80355406, 0.0326908, 0.5372783, 0.85727555, 0.35566393, 0.63623023, 0.78548473, 0.693676, 0.4230264, 0.36891872, 0.059841406, 0.29566652, 0.095881194, 0.6176351, 0.1350901, 0.52221787, 0.13697018, 0.1449875, 0.993447, 0.833866, 0.23859593, 0.21260102, 0.0910636, 0.8156608, 0.44380498, 0.44346517, 0.5464289, 0.34633392, 0.7998548, 0.29375648, 0.4759037, 0.8533105, 0.20307384, 0.15185145, 0.40528616, 0.78697807, 0.1437004, 0.08177473, 0.45124426, 0.661132, 0.64770323, 0.441686, 0.9395629, 0.41399932, 0.42883596, 0.8116194, 0.337172, 0.11649776, 0.57241863, 0.07148348, 0.3952512, 0.8567239, 0.70028764, 0.18131402, 0.4043292, 0.8424678, 0.7959949, 0.15536173, 0.60968417, 0.89281917, 0.56599796, 0.2409882, 0.283162, 0.11759212, 0.2836644, 0.56700927, 0.7899503, 0.80872387, 0.4993892, 0.07220947, 0.969362, 0.274903, 0.021951139, 0.8830727, 0.080902435, 0.9694833, 0.16646183, 0.6347188, 0.9441758, 0.43028086, 0.77319825, 0.20586129, 0.46638376, 0.8214475, 0.023498122, 0.108767845, 0.37443504, 0.098768815, 0.22941594, 0.961202, 0.32373017, 0.56606853, 0.4786482, 0.30316237, 0.34199885, 0.2983487, 0.88262475, 0.958476, 0.25844544};

    keras::Tensor target{1};
    target.data_ = {-1.6023874};
#pragma GCC diagnostic pop

    auto [model, load_time] = keras::timeit(keras::Model::load, "C:\Users\user\Desktop\keras-py2cpp\models\conv_3x3x3.model");
    auto [output, apply_time] = keras::timeit(model, in);

    for (size_t i = 0; i < target.dims_[0]; ++i)
        kassert_eq(target(i), output(i), 1e-6);

    return std::make_tuple(load_time, apply_time);
}

} // namespace test

