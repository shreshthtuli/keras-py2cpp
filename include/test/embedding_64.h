/* Autogenerated file, DO NOT EDIT */
#pragma once

#include "keras/model.h"

namespace test {

inline auto embedding_64() {
    printf("TEST embedding_64\n");

#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
    keras::Tensor in{10};
    in.data_ = {9., 15., 64., 28., 89., 93., 29., 8., 73., 0.};

    keras::Tensor target{20};
    target.data_ = {0.4772324, 0.50739616, 0.50698805, 0.5017655, 0.50193936, 0.5033912, 0.5044049, 0.50011975, 0.49442753, 0.5117725, 0.49517983, 0.51797295, 0.4955482, 0.5085405, 0.5091667, 0.48431885, 0.49990562, 0.49247724, 0.49870387, 0.50976425};
#pragma GCC diagnostic pop

    auto [model, load_time] = keras::timeit(keras::Model::load, "C:\Users\user\Desktop\keras-py2cpp\models\embedding_64.model");
    auto [output, apply_time] = keras::timeit(model, in);

    for (size_t i = 0; i < target.dims_[0]; ++i)
        kassert_eq(target(i), output(i), 1e-6);

    return std::make_tuple(load_time, apply_time);
}

} // namespace test

