/* Autogenerated file, DO NOT EDIT */
#pragma once

#include "keras/model.h"

namespace test {

inline auto maxpool2d_3x2x2() {
    printf("TEST maxpool2d_3x2x2\n");

#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
    keras::Tensor in{10, 10, 3};
    in.data_ = {0.6483526, 0.078273915, 0.045279775, 0.84861517, 0.0057283486, 0.9201674, 0.5438912, 0.2102867, 0.02081243, 0.5316401, 0.43940887, 0.5330411, 0.5523747, 0.956918, 0.12679608, 0.686461, 0.41964203, 0.96119416, 0.5380038, 0.99972135, 0.6459913, 0.7778335, 0.46028158, 0.7020698, 0.64730084, 0.28243467, 0.6471313, 0.84048575, 0.6336449, 0.10003814, 0.0961117, 0.60069555, 0.5545736, 0.26408136, 0.15169153, 0.3023728, 0.35026523, 0.021768898, 0.8167964, 0.5208152, 0.16126913, 0.9362733, 0.51207626, 0.22576004, 0.0373188, 0.14244916, 0.1854536, 0.14237256, 0.55544347, 0.82260597, 0.2944478, 0.74879706, 0.40936348, 0.80272716, 0.72246736, 0.17213972, 0.70739585, 0.21259841, 0.077528216, 0.2724183, 0.27988622, 0.26061466, 0.6385416, 0.36611295, 0.011756884, 0.99438655, 0.28044432, 0.72103965, 0.109141044, 0.2052117, 0.008045612, 0.52727556, 0.37735996, 0.68440384, 0.7885386, 0.19216421, 0.77873325, 0.82508427, 0.23734447, 0.46245414, 0.433172, 0.8306019, 0.32387406, 0.4859158, 0.95663345, 0.573874, 0.5342415, 0.8197976, 0.07779292, 0.08626289, 0.25176254, 0.024376245, 0.70190454, 0.9694617, 0.23009965, 0.7614368, 0.3465171, 0.61937284, 0.76708144, 0.050983183, 0.15831368, 0.12414485, 0.87682104, 0.053115334, 0.17600729, 0.19119717, 0.27319148, 0.77692276, 0.2134029, 0.4112757, 0.8114024, 0.35787347, 0.55104154, 0.124737546, 0.46740675, 0.008891772, 0.059263498, 0.98870945, 0.7878352, 0.60857356, 0.6782142, 0.8874591, 0.9295459, 0.84637904, 0.27960756, 0.4724221, 0.5772145, 0.54112446, 0.6111608, 0.23495655, 0.44784644, 0.060959578, 0.77643853, 0.15935007, 0.44773895, 0.35673553, 0.6651778, 0.08620482, 0.58463067, 0.42920518, 0.88989043, 0.3397098, 0.65642416, 0.4574413, 0.8678885, 0.34172195, 0.5729276, 0.69726497, 0.32877392, 0.9558083, 0.20011051, 0.79930574, 0.12649843, 0.47873893, 0.5582094, 0.8424515, 0.8894107, 0.21105458, 0.19496161, 0.2644873, 0.95833534, 0.70335364, 0.35665312, 0.8621709, 0.023653843, 0.62023467, 0.20902298, 0.9507833, 0.34002936, 0.94982743, 0.33859956, 0.7299328, 0.8276619, 0.35715875, 0.15041257, 0.16948089, 0.05191777, 0.41592944, 0.7135737, 0.36399835, 0.04538693, 0.3002804, 0.42731717, 0.7300011, 0.610049, 0.056202136, 0.49106327, 0.72133034, 0.11792224, 0.98851573, 0.85592115, 0.2318449, 0.47091597, 0.42205587, 0.21818884, 0.85976064, 0.77224123, 0.018781824, 0.68866247, 0.62234974, 0.49548844, 0.7231368, 0.3415293, 0.70083034, 0.40708953, 0.90146375, 0.8419083, 0.262948, 0.029522903, 0.6180659, 0.7959128, 0.9382382, 0.05926085, 0.34629145, 0.35307285, 0.10889079, 0.8394837, 0.40528443, 0.8411188, 0.68984276, 0.2014244, 0.4873762, 0.47941375, 0.72332877, 0.93424803, 0.5277364, 0.011974886, 0.11145691, 0.5817278, 0.90179473, 0.34569186, 0.7080283, 0.061414592, 0.038177144, 0.83572537, 0.741152, 0.5219586, 0.6880745, 0.6860563, 0.61661935, 0.56323886, 0.06931703, 0.48719323, 0.10333155, 0.033115353, 0.2603889, 0.00316595, 0.3342899, 0.7128852, 0.34383482, 0.15757614, 0.065877005, 0.9900841, 0.58383304, 0.65226513, 0.2344992, 0.32479617, 0.15430607, 0.7953506, 0.7774688, 0.81323457, 0.48198116, 0.42807773, 0.31598103, 0.93220794, 0.7175304, 0.48757908, 0.7049696, 0.98100555, 0.025984755, 0.2357954, 0.03414083, 0.15395236, 0.8067252, 0.5477102, 0.47984272, 0.25362, 0.42958516, 0.10006223, 0.22941807, 0.69269097, 0.67112684, 0.25882003, 0.43674216, 0.73792875, 0.5969757, 0.7112372, 0.8573495, 0.24865137, 0.645016, 0.022784427, 0.28623316, 0.15202685, 0.01480864, 0.37335026, 0.924074, 0.34434178, 0.24937904, 0.1140603, 0.65510553};

    keras::Tensor target{1};
    target.data_ = {-0.7566314};
#pragma GCC diagnostic pop

    auto [model, load_time] = keras::timeit(keras::Model::load, "C:\Users\user\Desktop\keras-py2cpp\models\maxpool2d_3x2x2.model");
    auto [output, apply_time] = keras::timeit(model, in);

    for (size_t i = 0; i < target.dims_[0]; ++i)
        kassert_eq(target(i), output(i), 1e-6);

    return std::make_tuple(load_time, apply_time);
}

} // namespace test

