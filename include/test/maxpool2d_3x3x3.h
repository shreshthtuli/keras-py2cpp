/* Autogenerated file, DO NOT EDIT */
#pragma once

#include "keras/model.h"

namespace test {

inline auto maxpool2d_3x3x3() {
    printf("TEST maxpool2d_3x3x3\n");

#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
    keras::Tensor in{10, 10, 3};
    in.data_ = {0.82752603, 0.11326106, 0.8137475, 0.8537889, 0.79549813, 0.37726256, 0.7323156, 0.7041951, 0.2780805, 0.122539945, 0.2013584, 0.53768235, 0.08199068, 0.95021725, 0.7813688, 0.6766521, 0.9860072, 0.98000103, 0.9520688, 0.1413079, 0.9492681, 0.091717884, 0.47856614, 0.7861826, 0.3452983, 0.72814137, 0.013198719, 0.46106187, 0.47355467, 0.7442605, 0.6149286, 0.9811314, 0.9853263, 0.4303526, 0.6221909, 0.74523723, 0.96944886, 0.44957027, 0.3525364, 0.9433304, 0.81101173, 0.1756688, 0.15296708, 0.76222646, 0.07095378, 0.55782706, 0.16122541, 0.8024173, 0.24418277, 0.72530115, 0.42355022, 0.27589166, 0.57822025, 0.60570174, 0.78223646, 0.92276764, 0.01926044, 0.09082501, 0.4685523, 0.38307738, 0.25965953, 0.19775899, 0.40969455, 0.20729695, 0.41868526, 0.1382738, 0.68034935, 0.8352837, 0.60205483, 0.5044141, 0.32548356, 0.5479334, 0.9552991, 0.8679562, 0.16642307, 0.0073126084, 0.63876384, 0.06156579, 0.699416, 0.78439873, 0.042605545, 0.23980846, 0.55575997, 0.14603433, 0.35385534, 0.6935811, 0.5862057, 0.54830885, 0.87171406, 0.6351678, 0.45258656, 0.10322103, 0.13736545, 0.5220108, 0.073169015, 0.27651602, 0.60336345, 0.15108758, 0.8884183, 0.07770475, 0.7750787, 0.044467792, 0.31521505, 0.39936954, 0.74667966, 0.7637056, 0.7334315, 0.7462509, 0.44074196, 0.29682392, 0.7096703, 0.6877176, 0.04739953, 0.61354285, 0.9169598, 0.3112717, 0.103619896, 0.94164914, 0.19042149, 0.49196556, 0.4440345, 0.30371964, 0.464402, 0.65584075, 0.39621, 0.6239171, 0.4393428, 0.55432606, 0.37769237, 0.3374408, 0.91827774, 0.6414708, 0.56616235, 0.105124205, 0.3488774, 0.3761971, 0.5920142, 0.8910192, 0.62896603, 0.20169224, 0.22114967, 0.41346425, 0.25124022, 0.08003728, 0.043750744, 0.60785234, 0.38215896, 0.78191227, 0.75603414, 0.9508094, 0.48501807, 0.33536622, 0.28427565, 0.40157843, 0.0554134, 0.96342736, 0.74656546, 0.48752996, 0.5029686, 0.7710145, 0.23504563, 0.5860777, 0.034318812, 0.3690544, 0.20647144, 0.09092159, 0.031926874, 0.7400274, 0.739579, 0.54744494, 0.49741384, 0.695038, 0.035342757, 0.5180264, 0.19508073, 0.39691082, 0.44840664, 0.06867292, 0.3122846, 0.15064406, 0.8979498, 0.74053717, 0.26626873, 0.20354328, 0.9154848, 0.9006317, 0.5104393, 0.23578882, 0.30285725, 0.9818355, 0.57324344, 0.18850377, 0.7490696, 0.23782851, 0.64423233, 0.84871733, 0.70166534, 0.93659055, 0.46863288, 0.46454522, 0.77617407, 0.25764298, 0.71158195, 0.378045, 0.42146242, 0.9596176, 0.082732566, 0.47245842, 0.63892734, 0.86635137, 0.756629, 0.5315475, 0.78722495, 0.41846493, 0.98100483, 0.6147823, 0.7405616, 0.736213, 0.114807636, 0.115537025, 0.43963218, 0.6832962, 0.77464163, 0.31103218, 0.67545706, 0.093253404, 0.5267298, 0.011929591, 0.5489937, 0.0014598982, 0.24549817, 0.4048794, 0.58503747, 0.74234706, 0.44235188, 0.094409615, 0.89703524, 0.41258392, 0.47146076, 0.44686493, 0.586854, 0.032330208, 0.63794786, 0.40223452, 0.20506853, 0.9863993, 0.38999268, 0.41538712, 0.22910815, 0.06625501, 0.9929973, 0.26774266, 0.4764988, 0.663935, 0.9582627, 0.82148325, 0.9947115, 0.43198818, 0.5576008, 0.8320121, 0.9907794, 0.19573325, 0.35967878, 0.45291165, 0.60557985, 0.2652004, 0.93641007, 0.68924844, 0.47139886, 0.8325932, 0.3420574, 0.075633496, 0.49537754, 0.6763756, 0.46035028, 0.25682107, 0.5622512, 0.4432471, 0.3183995, 0.4212924, 0.1647228, 0.982731, 0.050960027, 0.53752524, 0.90323955, 0.48378053, 0.5493727, 0.66294855, 0.029513145, 0.5646333, 0.6347677, 0.36042702, 0.7337037, 0.94326633, 0.19626372, 0.8048324, 0.4448913, 0.16139306, 0.8998369, 0.3532577};

    keras::Tensor target{1};
    target.data_ = {-0.9113727};
#pragma GCC diagnostic pop

    auto [model, load_time] = keras::timeit(keras::Model::load, "C:\Users\user\Desktop\keras-py2cpp\models\maxpool2d_3x3x3.model");
    auto [output, apply_time] = keras::timeit(model, in);

    for (size_t i = 0; i < target.dims_[0]; ++i)
        kassert_eq(target(i), output(i), 1e-6);

    return std::make_tuple(load_time, apply_time);
}

} // namespace test

